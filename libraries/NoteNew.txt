<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Performance and Downtime Chart</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels"></script>
    <style>
        body {
            font-family: 'Arial', sans-serif;
            background-color: #f9f9f9;
            padding: 20px;
        }
        h2 {
            text-align: center;
            color: #333;
        }
        .chart-container {
            max-width: 100%;
            margin: 20px 0;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            border-radius: 10px;
            background-color: #fff;
            padding: 20px;
        }

        .chart-title {
            font-size: 20px;
            margin-bottom: 10px;
            font-weight: bold;
            color: #333;
        }
    </style>
</head>
<body>
    <h2>Performance and Downtime Charts</h2>
    <div id="chartsContainer" class="chart-container"></div>

    <script>
        async function fetchLineData() {
            try {
                const url = new URL('http://localhost:8080/ssmqrcode/home2');
                const response = await fetch(url);
                if (!response.ok) throw new Error('Failed to fetch data.');

                const data = await response.json();
                console.log('Data:', data);

                const today = new Date();
                const currentMonth = today.getMonth() + 1; 
                const currentYear = today.getFullYear();
                const daysInCurrentMonth = new Date(currentYear, currentMonth, 0).getDate();

                const labels = Array.from({ length: daysInCurrentMonth }, (_, i) => {
                    const day = i + 1; 
                    return `${day < 10 ? '0' : ''}${day}/${currentMonth < 10 ? '0' : ''}${currentMonth}/${currentYear}`; // Ensure two digits
                });
                

                // Generate example OEE data for each day
                const oeeData = Array.from({ length: daysInCurrentMonth }, () => Math.floor(Math.random() * 21) + 80); // Random OEE data between 80 and 100
                const lossEfficiency = oeeData.map(efficiency => Math.max(0, 100 - efficiency)); // Ensure loss is non-negative

                // Group data by lineName
                const groupedData = data.reduce((acc, item) => {
                    if (!acc[item.lineName]) {
                        acc[item.lineName] = [];
                    }
                    acc[item.lineName].push(item);
                    return acc;
                }, {});

                // Create a chart for each lineName
                for (const lineName in groupedData) {
                    const lineData = groupedData[lineName];

                 // Create a mapping from day to downtime data
                    const downtimeMapping = {};
                    lineData.forEach(item => {
                        downtimeMapping[item.day] = {
                            shortStop: item.shortStop || 0,
                            longStop: item.longStop || 0,
                            defective: item.defective || 0,
                            shortStopPercentage: item.shortStopPercentage || 0,
                            longStopPercentage: item.longStopPercentage || 0,
                            dccPercentage: item.dccPercentage || 0,
                            dmtdPercentage: item.dmtdPercentage || 0,
                            nrPercentage: item.nrPercentage || 0,
                            ppPercentage: item.ppPercentage || 0,
                            dcc: item.dcc || 0,
                            nr: item.nr || 0,
                            dmtd: item.dmtd || 0,
                            
                            // Add the count fields here
                            shortCount: item.shortCount || 0,
                            longCount: item.longCount || 0,
                            PPCount: item.PPCount || 0,
                            dccCount: item.dccCount || 0,
                            dmtdCount: item.dmtdCount || 0,
                            nrCount: item.nrCount || 0
                        };
                    });

                    // Now you can retrieve these counts using downtimeMapping
                    const shortStopData = labels.map(day => downtimeMapping[day]?.shortStopPercentage || 0);
                    const shortStop = labels.map(day => downtimeMapping[day]?.shortStop || 0);
                    const shortCount = labels.map(day => downtimeMapping[day]?.shortCount || 0);
                    const longStopData = labels.map(day => downtimeMapping[day]?.longStopPercentage || 0);
                    const longStop = labels.map(day => downtimeMapping[day]?.longStop || 0);
                    const longCount = labels.map(day => downtimeMapping[day]?.longCount || 0);
                    const defectiveData = labels.map(day => downtimeMapping[day]?.ppPercentage || 0);
                    const defective = labels.map(day => downtimeMapping[day]?.defective || 0);
                    const ppCount = labels.map(day => downtimeMapping[day]?.PPCount || 0);
                    const dccData = labels.map(day => downtimeMapping[day]?.dccPercentage || 0);
                    const dcc = labels.map(day => downtimeMapping[day]?.dcc || 0);
                    const dccCount = labels.map(day => downtimeMapping[day]?.dccCount || 0);
                    const dmtdData = labels.map(day => downtimeMapping[day]?.dmtdPercentage || 0);
                    const dmtd = labels.map(day => downtimeMapping[day]?.dmtd || 0);
                    const dmtdCount = labels.map(day => downtimeMapping[day]?.dmtdCount || 0);
                    const nrData = labels.map(day => downtimeMapping[day]?.nrPercentage || 0);
                    const nr = labels.map(day => downtimeMapping[day]?.nr || 0);
                    const nrCount = labels.map(day => downtimeMapping[day]?.nrCount || 0);
                    
                    
                    const monthlyAverage = (dataArray) => {
                        const sum = dataArray.reduce((a, b) => a + b, 0);
                        return sum / dataArray.filter(val => val > 0).length || 0;
                    };

                    const averageShortStop = monthlyAverage(shortStopData);
                    const averageLongStop = monthlyAverage(longStopData);
                    const averageDefective = monthlyAverage(defectiveData);
                    const averageDcc = monthlyAverage(dccData);
                    const averageDmtd = monthlyAverage(dmtdData);
                    const averageNr = monthlyAverage(nrData);


                    //const canvas = document.createElement('canvas');
                    //canvas.id = `chart-${lineName.replace(/\s+/g, '-')}`; // Replace spaces with dashes for valid ID
                    //document.getElementById('chartsContainer').appendChild(canvas);
                    
                    const canvasContainer = document.createElement('div');
                    canvasContainer.classList.add('canvas-container');

                    // Create the div container for the monthly canvas
                    const monthlyCanvasContainer = document.createElement('div');
                    monthlyCanvasContainer.classList.add('monthly-canvas-container');

                    // Create the month chart container and title
                    const monthchartContainer = document.createElement('div');
                    monthchartContainer.classList.add('chart-month');
                    const chartMonthTitle = document.createElement('div');
                    chartMonthTitle.classList.add('chartMonth-title');
                    chartMonthTitle.innerText = lineName;
                    monthchartContainer.appendChild(chartMonthTitle);

                    // Create the monthly canvas element
                    const monthlyCanvas = document.createElement('canvas');
                    monthlyCanvas.id = `monthly-chart-${lineName.replace(/\s+/g, '-')}`;

                    // Append the canvas to its new container
                    monthlyCanvasContainer.appendChild(monthlyCanvas);

                    // Append the monthly canvas container to the canvas container
                    canvasContainer.appendChild(monthlyCanvasContainer);

                    // Append the canvas container to the charts container
                    document.getElementById('chartsContainer').appendChild(canvasContainer);

                    const chartContainer = document.createElement('div');
                    chartContainer.classList.add('chart-container');
                    const chartTitle = document.createElement('div');
                    chartTitle.classList.add('chart-title');
                    chartTitle.innerText = lineName;
                    chartContainer.appendChild(chartTitle);

                    const dailyCanvas = document.createElement('canvas');
                    dailyCanvas.id = `chart-${lineName.replace(/\s+/g, '-')}`;

                    chartContainer.appendChild(dailyCanvas);
                    canvasContainer.appendChild(chartContainer);


                    const ctx = dailyCanvas.getContext('2d');
                    new Chart(ctx, {
                        type: 'bar',
                        data: {
                            labels: labels,
                            datasets: [
                                {
                                    label: 'Dừng ngắn',
                                    data: shortStopData,
                                    barThickness: 20,
                                    borderRadius: 8,
                                    backgroundColor: 'rgba(75, 192, 192, 0.6)',
                                },
                                {
                                    label: 'Dừng dài',
                                    data: longStopData,
                                    barThickness: 20,
                                    borderRadius: 8,
                                    backgroundColor: 'rgba(153, 102, 255, 0.6)',
                                },
                                {
                                    label: 'Phế phẩm',
                                    data: defectiveData,
                                    barThickness: 20,
                                    borderRadius: 8,
                                    backgroundColor: 'rgba(255, 159, 64, 0.6)',
                                },
                                {
                                    label: 'Đổi mã thay dao',
                                    data: dmtdData,
                                    barThickness: 20,
                                    borderRadius: 8,
                                    backgroundColor: 'rgba(255, 99, 132, 0.6)',
                                },
                                {
                                    label: 'Đầu cuối ca',
                                    data: dccData,
                                    barThickness: 20,
                                    borderRadius: 8,
                                    backgroundColor: 'rgba(145, 102, 132, 0.6)',
                                },
                                {
                                    label: 'Ngoài ra',
                                    data: nrData,
                                    barThickness: 20,
                                    borderRadius: 8,
                                    backgroundColor: 'rgba(175, 22, 136, 0.6)',
                                },
                                {
                                    type: 'line',
                                    label: 'OEE',
                                    data: oeeData,
                                    borderColor: 'rgba(75, 192, 192, 1)',
                                    backgroundColor: 'rgba(75, 192, 192, 0.1)',
                                    fill: false,
                                    pointBackgroundColor: 'rgba(75, 192, 192, 1)',
                                    pointRadius: 5,
                                    tension: 0.3,
                                    yAxisID: 'efficiency'
                                },
                                {
                                    type: 'line',
                                    label: 'Tỷ lệ mất mát',
                                    data: lossEfficiency,
                                    borderColor: 'rgba(255, 99, 132, 1)',
                                    backgroundColor: 'rgba(255, 99, 132, 0.1)',
                                    fill: false,
                                    pointBackgroundColor: 'rgba(255, 99, 132, 1)',
                                    pointRadius: 5,
                                    tension: 0.3,
                                    yAxisID: 'efficiency' 
                                }
                            ]
                        },
                        options: {
                            responsive: true,
                            scales: {
                                x: { stacked: true },
                                y: {
                                  beginAtZero: true,
                                  max: 100,
                                  stacked: true,
                                },
                                efficiency: {
                                  type: "linear",
                                  position: "left",
                                  beginAtZero: true,
                                  max: 100,
                                  title: {
                                    display: true,
                                    text: "Efficiency (%)",
                                  },
                                  grid: {
                                    drawOnChartArea: false,
                                  },
                                },
                              },
                              plugins: {
                            	  datalabels: {
                            	      display: function (context) {
                            	        return context.dataset.type === 'line'; 
                            	      },
                            	      formatter: function (value) {
                            	        return `${value}%`;
                            	      },
                            	      color: 'black',
                            	      align: 'top',
                            	      anchor: 'end'
                            	  },
                                  tooltip: {
                                	  callbacks: {
                                	        label: function (tooltipItem) {
                                	          const label = tooltipItem.dataset.label || ''; 
                                	          const value = tooltipItem.raw;
                                	          return `${label}: ${value}%`;
                                	        },
                                	        afterLabel: function (tooltipItem) {
                                	            if (tooltipItem.dataset.type !== 'line') {
                                	                const day = tooltipItem.label;
                                	                const downtime = downtimeMapping[day];
                                	                if (downtime) {
                                	                    const type = tooltipItem.dataset.label;
                                	                    const downtimeTypeData = {
                                	                        'Dừng ngắn': { time: downtime.shortStop, count: downtime.shortCount },
                                	                        'Dừng dài': { time: downtime.longStop, count: downtime.longCount },
                                	                        'Phế phẩm': { time: downtime.defective, count: downtime.PPCount },
                                	                        'Đổi mã thay dao': { time: downtime.dmtd, count: downtime.dmtdCount },
                                	                        'Đầu cuối ca': { time: downtime.dcc, count: downtime.dccCount },
                                	                        'Ngoài ra': { time: downtime.nr, count: downtime.nrCount },
                                	                    };

                                	                    const { time = 0, count = 0 } = downtimeTypeData[type] || {};
                                	                    console.log(`Type: ${type}, Time: ${time}, Count: ${count}`);  // Debug log

                                	                    return [
                                	                        `Thời gian dừng: ${time} phút`,
                                	                        `Số lần: ${count}`
                                	                    ];
                                	                }
                                	            }
                                	            return [];
                                	        }
                                	    }
                                	}
                                }
                            },
                            plugins: [ChartDataLabels]
                       });
                    
                    const monthlyCtx = monthlyCanvas.getContext('2d');
                    new Chart(monthlyCtx, {
                        type: 'bar',
                        data: {
                            labels: ['Hiệu suất trung bình'],  // Only one label for the single stacked column
                            datasets: [
                                {
                                    label: 'Dừng ngắn',
                                    data: [averageShortStop],
                                    barThickness: 50,
                                    backgroundColor: 'rgba(75, 192, 192, 0.6)'
                                },
                                {
                                    label: 'Dừng dài',
                                    data: [averageLongStop],
                                    barThickness: 50,
                                    backgroundColor: 'rgba(153, 102, 255, 0.6)'
                                },
                                {
                                    label: 'Phế phẩm',
                                    data: [averageDefective],
                                    barThickness: 50,
                                    backgroundColor: 'rgba(255, 159, 64, 0.6)'
                                },
                                {
                                    label: 'Đổi mã thay dao',
                                    data: [averageDmtd],
                                    barThickness: 50,
                                    backgroundColor: 'rgba(255, 99, 132, 0.6)'
                                },
                                {
                                    label: 'Đầu cuối ca',
                                    data: [averageDcc],
                                    barThickness: 50,
                                    backgroundColor: 'rgba(145, 102, 132, 0.6)'
                                },
                                {
                                    label: 'Ngoài ra',
                                    data: [averageNr],
                                    barThickness: 50,
                                    backgroundColor: 'rgba(175, 22, 136, 0.6)'
                                }
                            ]
                        },
                        options: {
                            responsive: true,
                            scales: {
                                x: {
                                    stacked: true  // Stack the datasets on the x-axis
                                },
                                y: {
                                    beginAtZero: true, // Start y-axis from zero
                                    stacked: true,     // Stack the datasets on the y-axis
                                    ticks: {
                                        callback: function(value) {
                                            return value + "%";  // Show percentage on the y-axis
                                        }
                                    }
                                }
                            },
                            plugins: {
                                datalabels: {
                                    anchor: 'center',
                                    align: 'center',
                                    formatter: (value) => value + '%',  // Show percentage value inside each stacked section
                                    color: 'black',
                                    font: {
                                        weight: 'bold'
                                    }
                                }
                            }
                        },
                        plugins: [ChartDataLabels]  // Ensure you have included ChartDataLabels plugin
                    });
                  }
               } catch (error) {
                   console.error('Error fetching line data:', error);
                   alert('Unable to fetch line data. Please try again.');
               }
           }
           fetchLineData();
    </script>
</body>
</html>
