package com.example.qrcode;

import android.Manifest;
import android.content.Intent;
import android.database.Cursor;
import android.os.Bundle;
import android.os.Handler;
import android.util.Log;
import android.util.SparseBooleanArray;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.View;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;
import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;

import com.google.zxing.integration.android.IntentIntegrator;
import com.google.zxing.integration.android.IntentResult;
import com.karumi.dexter.Dexter;
import com.karumi.dexter.PermissionToken;
import com.karumi.dexter.listener.PermissionDeniedResponse;
import com.karumi.dexter.listener.PermissionGrantedResponse;
import com.google.android.material.floatingactionbutton.FloatingActionButton;
import com.karumi.dexter.listener.PermissionRequest;
import com.karumi.dexter.listener.single.PermissionListener;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;

public class MainActivity extends AppCompatActivity {
    private ImageView btnScan;
    private FloatingActionButton btnAdd, btnListView, btnShowHistory, btnProcess;
    private DatabaseHelper databaseHelper;
    private TextView txtProcessingStatus;
    private long startTime, endTime;
    private String scannedId;
    private ListView listview, listview2;
    private ArrayList<String> scannedIdCodes = new ArrayList<>();
    private boolean isRecording = false;
    private ArrayList<String> tempSelectedIssues = new ArrayList<>();
    private HashMap<String, Boolean> scannedIdRecordingStatus = new HashMap<>();
    private HashMap<String, Long> scannedIdStartTime = new HashMap<>();
    private HashMap<String, Long> scannedIdEndTime = new HashMap<>();
    private HashMap<String, ArrayList<String>> scannedIssuesMap = new HashMap<>();
    public static HashMap<String, DeviceProcess> processingDevices = new HashMap<>();
    private TextView txt_code;
    private TextView txt_name;
    private TextView txt_stage;
    private TextView txt_line;
    private DeviceProcessAdapter adapter;
    private ArrayList<DeviceProcess> processingList;
    private static final long SCAN_THRESHOLD = 1 * 60 * 1000; // 5 minutes in milliseconds
    private TextView timerTextView;
    private Handler handler = new Handler();
    private Runnable timerRunnable;
    private long elapsedTime = 0; // Thời gian đã trôi qua tính bằng milliseconds
    private boolean isTimerRunning = false;



    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        databaseHelper = new DatabaseHelper(this);
        btnScan = findViewById(R.id.btnScan);
        btnAdd = findViewById(R.id.btnAdd);
        btnListView = findViewById(R.id.btnViewList);
        btnShowHistory = findViewById(R.id.btnHistory);
        btnProcess = findViewById(R.id.btnViewProcessing);
        listview = findViewById(R.id.list_view_issues);
        txtProcessingStatus = findViewById(R.id.txtProcessingStatus);
        timerTextView = findViewById(R.id.timerTextView);

        timerRunnable = new Runnable() {
            @Override
            public void run() {
                if (isTimerRunning) {
                    for (DeviceProcess process : processingDevices.values()) {
                        process.elapsedTime = System.currentTimeMillis() - process.startTime; // Cập nhật thời gian đã trôi qua
                    }

                    adapter.notifyDataSetChanged(); // Cập nhật giao diện
                    handler.postDelayed(this, 1000); // Lặp lại mỗi giây
                }
            }
        };

        // Initialize ListViews
        listview2 = findViewById(R.id.listViewProcessing);
        adapter = new DeviceProcessAdapter(this, new ArrayList<>()); // Pass an empty list initially
        listview2.setAdapter(adapter);

        // yc camera
        Dexter.withActivity(this)
                .withPermission(Manifest.permission.CAMERA)
                .withListener(new PermissionListener() {
                    @Override
                    public void onPermissionGranted(PermissionGrantedResponse response) {
                        // Quyền đã được cấp
                    }

                    @Override
                    public void onPermissionDenied(PermissionDeniedResponse response) {
                        Toast.makeText(MainActivity.this, "You must enable this permission", Toast.LENGTH_SHORT).show();
                    }

                    @Override
                    public void onPermissionRationaleShouldBeShown(PermissionRequest permission, PermissionToken token) {
                        token.continuePermissionRequest();
                    }
                }).check();

        btnScan.setOnClickListener(v -> startQrCodeScanner());
        btnAdd.setOnClickListener(v -> startActivity(new Intent(MainActivity.this, AddData.class)));
        btnListView.setOnClickListener(v -> startActivity(new Intent(MainActivity.this, ListData.class)));
        btnShowHistory.setOnClickListener(v -> startActivity(new Intent(MainActivity.this, ListHistoryActivity.class)));
        btnProcess.setOnClickListener(v -> {
            if (!processingDevices.isEmpty()) {
                Intent intent = new Intent(MainActivity.this, DeviceProcessingActivity.class);
                startActivity(intent);
            } else {
                Toast.makeText(this, "No devices to process.", Toast.LENGTH_SHORT).show();
            }
        });
        // Check the processing status initially
        updateProcessingStatus();
    }

    @Override
    public boolean onKeyDown(int keyCode, KeyEvent event) {
        if (keyCode == KeyEvent.KEYCODE_VOLUME_UP) {
            startQrCodeScanner();
            return true;
        }
        return super.onKeyDown(keyCode, event);
    }

    private void updateProcessingStatus() {
        if (!processingDevices.isEmpty()) {
            txtProcessingStatus.setVisibility(View.VISIBLE);
        } else {
            txtProcessingStatus.setVisibility(View.GONE);
        }
    }

//    private void startQrCodeScanner() {
//        Intent intent = new Intent(MainActivity.this, QrCodeScanner.class);
//        startActivityForResult(intent, 100);
//    }

    private void startQrCodeScanner() {
        Intent intent = new Intent(MainActivity.this, QrCodeScanner.class);
        intent.putExtra("enableLaser", true); // Enable laser guidance (if supported)
        intent.putExtra("autoFocus", true);    // Enable auto-focus
        intent.putExtra("flash", true);        // Enable flash in low-light conditions
        intent.putExtra("continuousScan", true); // Enable continuous scanning if supported
        startActivityForResult(intent, 100);
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (requestCode == 100 && resultCode == RESULT_OK) {
            String scannedCode = data.getStringExtra("scannedCode");
            handleScannedResult(scannedCode);
        }
    }

    private void handleScannedResult(String scanResult) {

        if (scanResult.startsWith("M705")) {
            // Xử lý mã loại 1
            handleType1(scanResult);
        } else if (scanResult.startsWith("M706")) {
            // Xử lý mã loại 2
            handleType2(scanResult);
        } else if (scanResult.startsWith("M707")) {
            // Xử lý mã loại 3
            handleType3(scanResult);
        } else {
            Toast.makeText(this, "Invalid QR Code type", Toast.LENGTH_SHORT).show();
        }
    }

//    private void handleScannedResult(String scanResult) {
//        long currentTime = System.currentTimeMillis(); // Get current time
//
//        if (scanResult.startsWith("M705")) {
//            // Handle type 1
//            handleType1(scanResult);
//        } else if (scanResult.startsWith("M706")) {
//            // Handle type 2
//            if (scannedIdStartTime.containsKey(scannedId)) {
//                long timeSinceFirstScan = currentTime - scannedIdStartTime.get(scannedId);
//                if (timeSinceFirstScan > SCAN_THRESHOLD) {
//                    showWarningDialog(scanResult);
//                    return;
//                }
//            }
//            handleType2(scanResult);
//        } else if (scanResult.startsWith("M707")) {
//            // Handle type 3
//            if (scannedIdStartTime.containsKey(scannedId)) {
//                long timeSinceFirstScan = currentTime - scannedIdStartTime.get(scannedId);
//                if (timeSinceFirstScan > SCAN_THRESHOLD) {
//                    showWarningDialog(scanResult);
//                    return;
//                }
//            }
//            handleType3(scanResult);
//        } else {
//            Toast.makeText(this, "Invalid QR Code type", Toast.LENGTH_SHORT).show();
//        }
//    }

//    private void showWarningDialog(String scanResult) {
//        AlertDialog.Builder builder = new AlertDialog.Builder(this);
//        builder.setTitle("Warning")
//                .setMessage("Bạn đã mất quá nhiều thời gian để hoàn thành lần quét thứ hai cho mã này. Vui lòng quét lại để tiếp tục.")
//                .setCancelable(false) // Prevent dismissal by tapping outside
//                .setPositiveButton("OK", (dialog, which) -> {
//                    // Optional: reset time if needed or take other actions
//                })
//                .create()
//                .show();
//    }

    private void showWarningDialog(String scanResult) {
        AlertDialog.Builder builder = new AlertDialog.Builder(this);

        builder.setTitle("Warning")
                .setMessage("Bạn đã mất quá nhiều thời gian để hoàn thành lần quét thứ hai cho mã này. Bạn muốn tiếp tục quét hay xóa mã này?")
                .setCancelable(false) // Prevent dismissal by tapping outside
                .setPositiveButton("Continue", (dialog, which) -> {
                    // Close the dialog and allow user to continue scanning
                    // No state change is necessary here.

                    // Optionally, log the action or show feedback if required
                    Toast.makeText(MainActivity.this, "Tiếp tục quét mã...", Toast.LENGTH_SHORT).show();
                    // Here you might trigger any scan methods or reset any flags as necessary
                })
                .setNegativeButton("Delete", (dialog, which) -> {
                    // If the user chooses to delete, remove details related to scannedId from processing devices.
                    if (scannedId != null) { // Ensure scannedId is not null
                        processingDevices.remove(scannedId); // Remove from processing list
                        scannedIdRecordingStatus.remove(scannedId); // Remove recording status
                        scannedIdStartTime.remove(scannedId); // Remove the start time

                        // Notify the user about the deletion
                        Toast.makeText(MainActivity.this, "Mã đã được xóa.", Toast.LENGTH_SHORT).show();

                        // Update the pending list to reflect changes
                        updatePendingList();
                    }
                })
                .create()
                .show();
    }



    private void updatePendingList() {
        ArrayList<DeviceProcess> currentList = new ArrayList<>(processingDevices.values());
        adapter.clear(); // Clear current items in the adapter
        adapter.addAll(currentList); // Add all processing devices to the adapter
        adapter.notifyDataSetChanged(); // Notify the adapter for data change

        // Truyền vào visibility cho ListView
        listview2.setVisibility(currentList.isEmpty() ? View.GONE : View.VISIBLE);
    }

    private void handleType1(String scanResult) {
        // Lấy dữ liệu từ cơ sở dữ liệu
        Cursor deviceData = databaseHelper.selectData(scanResult);
        LayoutInflater inflater = this.getLayoutInflater();
        View dialogView = inflater.inflate(R.layout.dialog_information, null);
        TextView txt_id = dialogView.findViewById(R.id.txt_id);
        TextView txt_idCode = dialogView.findViewById(R.id.txt_idCode);
        txt_code = dialogView.findViewById(R.id.txt_code);
        txt_name = dialogView.findViewById(R.id.txt_name);
        txt_stage = dialogView.findViewById(R.id.txt_stage);
        txt_line = dialogView.findViewById(R.id.txt_line);
        ListView listView = dialogView.findViewById(R.id.list_view_issues);
        ArrayList<String> issueList = new ArrayList<>();

        if (deviceData.moveToFirst()) {
            // Extract data from the database
            int idIndex = deviceData.getColumnIndex(Database.DEVICE_ID);
            int idCodeIndex = deviceData.getColumnIndex(Database.DEVICE_ID_CODE);
            int codeIndex = deviceData.getColumnIndex(Database.DEVICE_CODE);
            int nameIndex = deviceData.getColumnIndex(Database.DEVICE_NAME);
            int issueIndex = deviceData.getColumnIndex(Database.DEVICE_ISSUE);
            int stageIndex = deviceData.getColumnIndex(Database.DEVICE_STAGE);
            int lineIndex = deviceData.getColumnIndex(Database.DEVICE_LINE);

            scannedId = deviceData.getString(idCodeIndex);
            String typeName = "Unknown";

            txt_id.setText("ID: " + deviceData.getString(idIndex));
            txt_idCode.setText("IdCode: " + scannedId);
            txt_code.setText("Code: " + deviceData.getString(codeIndex));
            txt_name.setText("Name: " + deviceData.getString(nameIndex));
            txt_stage.setText("Stage: " + deviceData.getString(stageIndex));
            txt_line.setText("Line: " + deviceData.getString(lineIndex));

            // Lấy vấn đề từ cơ sở dữ liệu
            String issues = deviceData.getString(issueIndex);
            if (issues != null) {
                String[] issuesArray = issues.split(",");
                for (String issue : issuesArray) {
                    issueList.add(issue.trim());
                }
            }

            // Quét lần đầu
            if (!scannedIdRecordingStatus.getOrDefault(scannedId, false)) {
                startTime = System.currentTimeMillis();
                elapsedTime = 0;
                isTimerRunning = true;
                handler.post(timerRunnable);
                scannedIdStartTime.put(scannedId, startTime);
                scannedIdRecordingStatus.put(scannedId, true);
                processingDevices.put(scannedId, new DeviceProcess(
                        deviceData.getString(codeIndex),
                        deviceData.getString(nameIndex),
                        deviceData.getString(stageIndex),
                        deviceData.getString(lineIndex),
                        typeName,
                        new ArrayList<>(issueList),
                        startTime
                ));
                showIssueDialog(dialogView, issueList, true);
            } else {
                // Lấy thông tin từ danh sách đang xử lý
                DeviceProcess deviceInfo = processingDevices.get(scannedId);
                if (deviceInfo != null) {
                    deviceInfo.issues.clear(); // Xóa các vấn đề cũ
                    deviceInfo.issues.addAll(issueList); // Cập nhật các vấn đề mới
                }

                // Quét lần hai, dừng đồng hồ
                endTime = System.currentTimeMillis();
                scannedIdEndTime.put(scannedId, endTime);
                isTimerRunning = false; // Dừng cập nhật
                handler.removeCallbacks(timerRunnable); // Xóa callback

                long durationInMinutes = (endTime - scannedIdStartTime.get(scannedId)) / (1000 * 60);

                deviceInfo = processingDevices.get(scannedId);
                if (deviceInfo != null) {
                    if (deviceInfo.issues.contains("Phế phẩm")) {
                        deviceInfo.typeName = "Phế phẩm";
                        deviceInfo.issues.clear();
                    } else {
                        deviceInfo.typeName = durationInMinutes > 5 ? "Dừng dài" : "Dừng ngắn";
                    }
                }
                saveDataOnSecondScan(scannedId);

                // Tạo một danh sách chứa thông tin thiết bị để upload
                ArrayList<Device_History> deviceHistoryList = new ArrayList<>();
                Device_History deviceHistory = new Device_History();

                deviceHistory.setIdCode(scannedId);
                deviceHistory.setCode(deviceInfo.code);
                deviceHistory.setName(deviceInfo.name);
                deviceHistory.setStage(deviceInfo.stage);
                deviceHistory.setLine(deviceInfo.line);
                deviceHistory.setIssue(String.join(", ", deviceInfo.issues));
                deviceHistory.setStartTime(formatTime(scannedIdStartTime.get(scannedId)));
                deviceHistory.setEndTime(formatTime(endTime));
                deviceHistory.setTotalTime(formatTotalTime(endTime - scannedIdStartTime.get(scannedId)));
                deviceHistory.setTypeName(deviceInfo.typeName);

                deviceHistoryList.add(deviceHistory);

                // Thực hiện upload dữ liệu
                new UploadDataTask(this, new UploadDataTask.OnUploadCompleteListener() {
                    @Override
                    public void onUploadComplete(Boolean success) {
                        if (success) {
                            // Xóa thiết bị khỏi danh sách và cập nhật lại giao diện
                            processingDevices.remove(scannedId);
                            updatePendingList();
                            Toast.makeText(MainActivity.this, "Data uploaded successfully.", Toast.LENGTH_SHORT).show();
                        }
                    }
                }).execute(deviceHistoryList);

                resetScannedIdState(scannedId);
                updatePendingList();
            }
        } else {
            // Không thấy dữ liệu
            Toast.makeText(this, "No data found for this device!", Toast.LENGTH_SHORT).show();
            txt_id.setText("No id found!!!");
            txt_code.setText("No code found!!!");
            txt_name.setText("No name found!!!");
        }

        deviceData.close();
    }


    private void handleType2(String scanResult) {
        // Extract information from database for the device associated with scanResult
        Cursor deviceData = databaseHelper.selectData(scanResult);
        ArrayList<String> issueList = new ArrayList<>();

        if (deviceData.moveToFirst()) {
            int idCodeIndex = deviceData.getColumnIndex(Database.DEVICE_ID_CODE);
            int lineIndex = deviceData.getColumnIndex(Database.DEVICE_LINE);
            int issueIndex = deviceData.getColumnIndex(Database.DEVICE_ISSUE);

            scannedId = deviceData.getString(idCodeIndex);
            String typeName = "Đổi mã, Thay dao";

            // Lấy vấn đề từ cơ sở dữ liệu
            String issues = deviceData.getString(issueIndex);
            if (issues != null) {
                String[] issuesArray = issues.split(",");
                for (String issue : issuesArray) {
                    issueList.add(issue.trim());
                }
            }

            // Quét lần đầu
            if (!scannedIdRecordingStatus.getOrDefault(scannedId, false)) {
                startTime = System.currentTimeMillis();
                scannedIdStartTime.put(scannedId, startTime);
                elapsedTime = 0;
                isTimerRunning = true;
                handler.post(timerRunnable);
                scannedIdStartTime.put(scannedId, startTime);
                scannedIdRecordingStatus.put(scannedId, true);
                processingDevices.put(scannedId, new DeviceProcess(
                        deviceData.getString(lineIndex),
                        new ArrayList<>(issueList),
                        typeName,
                        startTime
                ));
                //updateProcessingStatus();
                //updatePendingList();
                showCodeSelectionDialog(true);
            } else {
                DeviceProcess deviceInfo = processingDevices.get(scannedId);
                // Quét lần hai, dừng đồng hồ
                endTime = System.currentTimeMillis();
                scannedIdEndTime.put(scannedId, endTime);
                isTimerRunning = false; // Dừng cập nhật
                handler.removeCallbacks(timerRunnable); // Xóa callback
                if (deviceInfo != null) {
                    deviceInfo.issues.clear(); // Xóa các vấn đề cũ
                    deviceInfo.issues.addAll(issueList); // Cập nhật các vấn đề mới
                }

                deviceInfo = processingDevices.get(scannedId);
                if (deviceInfo != null) {
                    deviceInfo.typeName = "Đổi mã, Thay dao";
                }
                saveDataOnSecondScan2(scannedId);
                //resetScannedIdState(scannedId);
                //updatePendingList();

                // Tạo một danh sách chứa thông tin thiết bị để upload
                ArrayList<Device_History> deviceHistoryList = new ArrayList<>();
                Device_History deviceHistory = new Device_History();

                deviceHistory.setIdCode(scannedId);
                deviceHistory.setLine(deviceInfo.line);
                deviceHistory.setIssue("Đổi mã " + String.join("--> ", deviceInfo.issues));
                deviceHistory.setStartTime(formatTime(scannedIdStartTime.get(scannedId)));
                deviceHistory.setEndTime(formatTime(endTime));
                deviceHistory.setTotalTime(formatTotalTime(endTime - scannedIdStartTime.get(scannedId)));
                deviceHistory.setTypeName(deviceInfo.typeName);

                deviceHistoryList.add(deviceHistory);

                // Thực hiện upload dữ liệu
                new UploadDataTask(this, new UploadDataTask.OnUploadCompleteListener() {
                    @Override
                    public void onUploadComplete(Boolean success) {
                        if (success) {
                            // Xóa thiết bị khỏi danh sách và cập nhật lại giao diện
                            processingDevices.remove(scannedId);
                            updatePendingList();
                            Toast.makeText(MainActivity.this, "Data uploaded successfully.", Toast.LENGTH_SHORT).show();
                        }
                    }
                }).execute(deviceHistoryList);

                resetScannedIdState(scannedId);
                updatePendingList();
            }
        } else {
            // Không thấy dữ liệu
            Toast.makeText(this, "No data found for this device!", Toast.LENGTH_SHORT).show();
        }

        deviceData.close();
    }

    private void handleType3(String scanResult) {
        // Extract information from database for the device associated with scanResult
        Cursor deviceData = databaseHelper.selectData(scanResult);
        ArrayList<String> issueList = new ArrayList<>();

        if (deviceData.moveToFirst()) {
            int idCodeIndex = deviceData.getColumnIndex(Database.DEVICE_ID_CODE);
            int lineIndex = deviceData.getColumnIndex(Database.DEVICE_LINE);
            int issueIndex = deviceData.getColumnIndex(Database.DEVICE_ISSUE);

            scannedId = deviceData.getString(idCodeIndex);
            String typeName = "Đầu cuối ca";

            // Lấy vấn đề từ cơ sở dữ liệu
            String issues = deviceData.getString(issueIndex);
            if (issues != null) {
                String[] issuesArray = issues.split(",");
                for (String issue : issuesArray) {
                    issueList.add(issue.trim());
                }
            }

            // Quét lần đầu
            if (!scannedIdRecordingStatus.getOrDefault(scannedId, false)) {
                startTime = System.currentTimeMillis();
                scannedIdStartTime.put(scannedId, startTime);
                elapsedTime = 0;
                isTimerRunning = true;
                handler.post(timerRunnable);
                scannedIdRecordingStatus.put(scannedId, true);
                processingDevices.put(scannedId, new DeviceProcess(
                        deviceData.getString(lineIndex),
                        new ArrayList<>(issueList),
                        typeName,
                        startTime
                ));
                //updateProcessingStatus();
                //updatePendingList();
                showOptionsDialog(true);
            } else {
                DeviceProcess deviceInfo = processingDevices.get(scannedId);
                // Quét lần hai, dừng đồng hồ
                endTime = System.currentTimeMillis();
                scannedIdEndTime.put(scannedId, endTime);
                isTimerRunning = false; // Dừng cập nhật
                handler.removeCallbacks(timerRunnable); // Xóa callback
                if (deviceInfo != null) {
                    deviceInfo.issues.clear(); // Xóa các vấn đề cũ
                    deviceInfo.issues.addAll(issueList); // Cập nhật các vấn đề mới
                }

                deviceInfo = processingDevices.get(scannedId);
                if (deviceInfo != null) {
                    deviceInfo.typeName = "Đầu cuối ca";
                }
                saveDataOnSecondScan3(scannedId);
                //resetScannedIdState(scannedId);
                //updatePendingList();

                // Tạo một danh sách chứa thông tin thiết bị để upload
                ArrayList<Device_History> deviceHistoryList = new ArrayList<>();
                Device_History deviceHistory = new Device_History();

                deviceHistory.setIdCode(scannedId);
                deviceHistory.setLine(deviceInfo.line);
                deviceHistory.setIssue(String.join(",", deviceInfo.issues));
                deviceHistory.setStartTime(formatTime(scannedIdStartTime.get(scannedId)));
                deviceHistory.setEndTime(formatTime(endTime));
                deviceHistory.setTotalTime(formatTotalTime(endTime - scannedIdStartTime.get(scannedId)));
                deviceHistory.setTypeName(deviceInfo.typeName);

                deviceHistoryList.add(deviceHistory);

                // Thực hiện upload dữ liệu
                new UploadDataTask(this, new UploadDataTask.OnUploadCompleteListener() {
                    @Override
                    public void onUploadComplete(Boolean success) {
                        if (success) {
                            // Xóa thiết bị khỏi danh sách và cập nhật lại giao diện
                            processingDevices.remove(scannedId);
                            updatePendingList();
                            Toast.makeText(MainActivity.this, "Data uploaded successfully.", Toast.LENGTH_SHORT).show();
                        }
                    }
                }).execute(deviceHistoryList);

                resetScannedIdState(scannedId);
                updatePendingList();
            }
        } else {
            // Không thấy dữ liệu
            Toast.makeText(this, "No data found for this device!", Toast.LENGTH_SHORT).show();
        }

        deviceData.close();
    }

//    @Override
//    protected void onDestroy() {
//        super.onDestroy();
//        isTimerRunning = false;
//        handler.removeCallbacks(timerRunnable);
//    }

    private void showCodeSelectionDialog() {
        // Assuming this list comes from your database of valid codes
        List<String> availableCodes = Arrays.asList("001", "002", "003", "004");

        LayoutInflater inflater = this.getLayoutInflater();
        View dialogView = inflater.inflate(R.layout.dialog_select_codes, null);

        ListView listView = dialogView.findViewById(R.id.list_view_codes);
        ArrayAdapter<String> adapter = new ArrayAdapter<>(this, android.R.layout.simple_list_item_single_choice, availableCodes);
        listView.setAdapter(adapter);
        listView.setChoiceMode(ListView.CHOICE_MODE_SINGLE);

        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setView(dialogView)
                .setTitle("Select Code to Switch")
                .setPositiveButton("OK", (dialog, which) -> {
                    int checkedPosition = listView.getCheckedItemPosition();
                    if (checkedPosition != ListView.INVALID_POSITION) {
                        String newCode = availableCodes.get(checkedPosition);
                        String issueMessage = scannedId + " → " + newCode; // Transition message
                        handleCodeChange(issueMessage, newCode);
                    }
                })
                .setNegativeButton("Cancel", (dialog, which) -> dialog.dismiss())
                .create()
                .show();
    }

    private void handleCodeChange(String issueMessage, String newCode) {
        // Update the issue in processingDevices
        DeviceProcess deviceInfo = processingDevices.get(scannedId);
        if (deviceInfo != null) {
            deviceInfo.issues.clear();
            deviceInfo.issues.add(issueMessage);
            deviceInfo.typeName = "Đổi mã: " + issueMessage;
        }

        updatePendingList();
    }

    private void showIssueDialog(View dialogView, ArrayList<String> issueList, boolean isFirstScan) {
        ListView listView = dialogView.findViewById(R.id.list_view_issues);
        issueList.add("Phế phẩm");
        issueList.add("Other");

        ArrayAdapter<String> adapter = new ArrayAdapter<>(this, android.R.layout.simple_list_item_multiple_choice, issueList);
        listView.setAdapter(adapter);
        listView.setChoiceMode(ListView.CHOICE_MODE_MULTIPLE);

        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setView(dialogView)
                .setPositiveButton("OK", (dialog, which) -> {
                    SparseBooleanArray checked = listView.getCheckedItemPositions();
                    ArrayList<String> selectedIssues = new ArrayList<>();
                    boolean isDefectiveProductSelected = false;
                    boolean otherSelected = false;
                    updateProcessingStatus();

                    for (int i = 0; i < issueList.size(); i++) {
                        if (checked.get(i)) {
                            String issue = issueList.get(i);
                            selectedIssues.add(issue);
                            if ("Phế phẩm".equals(issue)) {
                                isDefectiveProductSelected = true;
                            } else if ("Other".equals(issue)) {
                                otherSelected = true;
                            }
                        }
                    }

                    // Handle the case where "Phế phẩm" is selected
                    if (isDefectiveProductSelected) {
                        selectedIssues.clear();
                        selectedIssues.add("Phế phẩm");
                        processingDevices.get(scannedId).typeName = "Phế phẩm";
                    } else if (selectedIssues.size() > 5) {
                        Toast.makeText(MainActivity.this, "You cannot select more than 5 issues.", Toast.LENGTH_SHORT).show();
                        return;
                    }

                    scannedIssuesMap.put(scannedId, selectedIssues);
                    updatePendingList();

                    if (otherSelected) {
                        showNewIssueDialog(selectedIssues);
                    } else if (isFirstScan) {
                        scannedIdCodes.add(scannedId);
                    }
                })
                .setNegativeButton("Close", (dialog, which) -> {
                    dialog.dismiss();
                    if (isFirstScan) {
                        processingDevices.clear();
                        resetScannedIdState(scannedId);
                        isRecording = false;
                        scannedIdCodes.clear();
                        tempSelectedIssues.clear();
                    }
                })
                .create()
                .show();
    }

    private void showCodeSelectionDialog(boolean isFirstScan) {

        LayoutInflater inflater = this.getLayoutInflater();
        View dialogView = inflater.inflate(R.layout.dialog_select_codes, null);
        ListView listView = dialogView.findViewById(R.id.list_view_codes);

        List<String> availableCodes = Arrays.asList("001", "002", "003", "004", " ");

        // Adapter to show available codes
        ArrayAdapter<String> adapter = new ArrayAdapter<>(this, android.R.layout.simple_list_item_multiple_choice, availableCodes);
        listView.setAdapter(adapter);
        listView.setChoiceMode(ListView.CHOICE_MODE_MULTIPLE);

        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setView(dialogView)
                .setTitle("Select Codes")
                .setPositiveButton("OK", (dialog, which) -> {
                    SparseBooleanArray checked = listView.getCheckedItemPositions();
                    boolean otherSelected = false;
                    ArrayList<String> selectedCodes = new ArrayList<>();

                    // Collect selected codes
                    for (int i = 0; i < availableCodes.size(); i++) {
                        if (checked.get(i)) {
                            String code = availableCodes.get(i);
                            selectedCodes.add(code);

                            if (" ".equals(code)) {
                                otherSelected = true;
                            }
                        }
                    }

                    // Validate number of selected codes
                    if (selectedCodes.size() > 5) {
                        Toast.makeText(MainActivity.this, "You cannot select more than 5 codes.", Toast.LENGTH_SHORT).show();
                        return; // Exit if more than 5 codes are selected
                    }

                    // Store selected codes in the map for the scanned ID
                    scannedIssuesMap.put(scannedId, selectedCodes);
                    updatePendingList();

                    // If first scan, store the scanned ID
                    if (otherSelected) {
                        showNewIssueDialog(selectedCodes);
                    } else if (isFirstScan) {
                        scannedIdCodes.add(scannedId);
                    }
                })
                .setNegativeButton("Close", (dialog, which) -> {
                    dialog.dismiss();
                    if (isFirstScan) {
                        processingDevices.clear();
                        resetScannedIdState(scannedId);
                        isRecording = false;
                        scannedIdCodes.clear();
                        tempSelectedIssues.clear();
                    }
                })
                .create()
                .show();
    }

    private void showOptionsDialog(boolean isFirstScan) {

        LayoutInflater inflater = this.getLayoutInflater();
        View dialogView = inflater.inflate(R.layout.dialog_select_codes, null);
        ListView listView = dialogView.findViewById(R.id.list_view_codes);

        List<String> availableCodes = Arrays.asList("Chuẩn bị sản xuất", "Xác nhận chất lượng", "Chuẩn bị trang phục");

        // Adapter to show available codes
        ArrayAdapter<String> adapter = new ArrayAdapter<>(this, android.R.layout.simple_list_item_multiple_choice, availableCodes);
        listView.setAdapter(adapter);
        listView.setChoiceMode(ListView.CHOICE_MODE_MULTIPLE);

        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setView(dialogView)
                .setTitle("Select Codes")
                .setPositiveButton("OK", (dialog, which) -> {
                    SparseBooleanArray checked = listView.getCheckedItemPositions();
                    ArrayList<String> selectedCodes = new ArrayList<>();

                    // Collect selected codes
                    for (int i = 0; i < availableCodes.size(); i++) {
                        if (checked.get(i)) {
                            String code = availableCodes.get(i);
                            selectedCodes.add(code);
                        }
                    }

                    // Validate number of selected codes
                    if (selectedCodes.size() > 5) {
                        Toast.makeText(MainActivity.this, "You cannot select more than 5 codes.", Toast.LENGTH_SHORT).show();
                        return; // Exit if more than 5 codes are selected
                    }

                    // Store selected codes in the map for the scanned ID
                    scannedIssuesMap.put(scannedId, selectedCodes);
                    updatePendingList();

                    // If first scan, store the scanned ID
                    if (isFirstScan) {
                        scannedIdCodes.add(scannedId);
                    }
                })
                .setNegativeButton("Close", (dialog, which) -> {
                    dialog.dismiss();
                    if (isFirstScan) {
                        processingDevices.clear();
                        resetScannedIdState(scannedId);
                        isRecording = false;
                        scannedIdCodes.clear();
                        tempSelectedIssues.clear();
                    }
                })
                .create()
                .show();
    }
    private void showDeleteIssueDialog(String issue, ArrayList<String> issueList, ListView listview) {
        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setTitle("Delete Issue");
        builder.setMessage("Are you sure you want to delete the issue: " + issue + "?");

        builder.setPositiveButton("Yes", (dialog, which) -> {
            databaseHelper.deleteIssueFromDevice(scannedId, issue);

            issueList.remove(issue);
            Toast.makeText(MainActivity.this, "Issue deleted successfully.", Toast.LENGTH_SHORT).show();

            updateIssueList(listview, issueList);
        })
                .setNegativeButton("No", (dialog, which) -> dialog.cancel())
                .show();
    }

    private void updateIssueList(ListView listview, ArrayList<String> issueList) {
        ArrayAdapter<String> adapter = new ArrayAdapter<>(this, android.R.layout.simple_list_item_multiple_choice, issueList);
        listview.setAdapter(adapter);
    }

    private void showNewIssueDialog (ArrayList<String> selectedIssues) {
        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setTitle("Enter New Issue");

        final EditText input = new EditText(this);
        builder.setView(input);

        builder.setPositiveButton("Add", (dialog, which) -> {
            String newIssue = input.getText().toString().trim();
            if(!newIssue.isEmpty()) {
                selectedIssues.add(newIssue);
                tempSelectedIssues.add(newIssue);

                databaseHelper.insertNewIssue(scannedId, newIssue);

                Toast.makeText(MainActivity.this, "New issue added.", Toast.LENGTH_SHORT).show();
            } else {
                Toast.makeText(MainActivity.this, "Please enter valid issue.", Toast.LENGTH_SHORT).show();
            }
        })
                .setNegativeButton("Cancel", (dialog, which) -> {
                    dialog.cancel();
                })
                .show();
    }

    // Phương thức để lưu dữ liệu trên lần quét thứ hai
    private void saveDataOnSecondScan(String scannedId) {
        //long endTime = System.currentTimeMillis();
        long totalTime = scannedIdEndTime.get(scannedId) - scannedIdStartTime.get(scannedId);
        String formattedStartTime = formatTime(scannedIdStartTime.get(scannedId));
        String formattedEndTime = formatTime(scannedIdEndTime.get(scannedId));
        String formattedTotalTime = formatTotalTime(totalTime);

        // Kiểm tra xem scannedId có trong danh sách ghi âm không
        if (scannedIdRecordingStatus.containsKey(scannedId)) {
            ArrayList<String> selectedIssues = scannedIssuesMap.get(scannedId);

            // Lấy thông tin thiết bị
            DeviceProcess deviceInfo = processingDevices.get(scannedId);
            if (deviceInfo != null) {
                Log.d("DatabaseInsertion", "Inserting with TypeName: " + deviceInfo.typeName);

                // Lưu dữ liệu vào cơ sở dữ liệu
                databaseHelper.insertListData(
                        scannedId,
                        deviceInfo.code,
                        deviceInfo.name,
                        deviceInfo.stage,
                        deviceInfo.line,
                        deviceInfo.typeName,
                        String.join(", ", selectedIssues),
                        formattedStartTime,
                        formattedEndTime,
                        formattedTotalTime
                );

                Toast.makeText(this, "Data saved successfully.", Toast.LENGTH_SHORT).show();
                // Xóa thiết bị khỏi danh sách đang xử lý
                processingDevices.remove(scannedId);
                updateProcessingStatus(); // Cập nhật trạng thái
            } else {
                Log.e("DeviceInfo", "DeviceInfo is null for scannedId: " + scannedId); // Log nếu deviceInfo là null
            }
        }
    }

    private void saveDataOnSecondScan2(String scannedId) {
        //long endTime = System.currentTimeMillis();
        long totalTime = scannedIdEndTime.get(scannedId) - scannedIdStartTime.get(scannedId);
        String formattedStartTime = formatTime(scannedIdStartTime.get(scannedId));
        String formattedEndTime = formatTime(scannedIdEndTime.get(scannedId));
        String formattedTotalTime = formatTotalTime(totalTime);

        // Kiểm tra xem scannedId có trong danh sách ghi âm không
        if (scannedIdRecordingStatus.containsKey(scannedId)) {
            ArrayList<String> selectedIssues = scannedIssuesMap.get(scannedId);

            // Lấy thông tin thiết bị
            DeviceProcess deviceInfo = processingDevices.get(scannedId);
            if (deviceInfo != null) {
                // Lưu dữ liệu vào cơ sở dữ liệu
                databaseHelper.insertListData2(
                        scannedId,
                        deviceInfo.line,
                        deviceInfo.typeName,
                        "Đổi mã " + String.join("-->", selectedIssues),
                        formattedStartTime,
                        formattedEndTime,
                        formattedTotalTime
                );

                Toast.makeText(this, "Data saved successfully.", Toast.LENGTH_SHORT).show();
                processingDevices.remove(scannedId);
                updateProcessingStatus();
            } else {
                Log.e("DeviceInfo", "DeviceInfo is null for scannedId: " + scannedId); // Log nếu deviceInfo là null
            }
        }
    }


    private void saveDataOnSecondScan3(String scannedId) {
        //long endTime = System.currentTimeMillis();
        long totalTime = scannedIdEndTime.get(scannedId) - scannedIdStartTime.get(scannedId);
        String formattedStartTime = formatTime(scannedIdStartTime.get(scannedId));
        String formattedEndTime = formatTime(scannedIdEndTime.get(scannedId));
        String formattedTotalTime = formatTotalTime(totalTime);

        // Kiểm tra xem scannedId có trong danh sách ghi âm không
        if (scannedIdRecordingStatus.containsKey(scannedId)) {
            ArrayList<String> selectedIssues = scannedIssuesMap.get(scannedId);

            // Lấy thông tin thiết bị
            DeviceProcess deviceInfo = processingDevices.get(scannedId);
            if (deviceInfo != null) {
                // Lưu dữ liệu vào cơ sở dữ liệu
                databaseHelper.insertListData2(
                        scannedId,
                        deviceInfo.line,
                        deviceInfo.typeName,
                        String.join(",", selectedIssues),
                        formattedStartTime,
                        formattedEndTime,
                        formattedTotalTime
                );

                Toast.makeText(this, "Data saved successfully.", Toast.LENGTH_SHORT).show();
                processingDevices.remove(scannedId);
                updateProcessingStatus();
            } else {
                Log.e("DeviceInfo", "DeviceInfo is null for scannedId: " + scannedId); // Log nếu deviceInfo là null
            }
        }
    }
    private void resetScannedIdState(String scannedId) {
        // reset Id nao da duoc insert vao db
        if (scannedIdRecordingStatus.containsKey(scannedId)) {
            scannedIdRecordingStatus.put(scannedId, false);
        }
    }

    private String formatTime(long timeInMillis) {
        SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss", Locale.getDefault());
        Date resultDate = new Date(timeInMillis);
        return sdf.format(resultDate);
    }

    private String formatTotalTime(long totalTimeMillis) {
        double totalTimeMinutes = totalTimeMillis / 60000.0;
        return String.format(Locale.getDefault(), "%.2f m", totalTimeMinutes);
    }

    private String formatElapsedTime(long milliseconds) {
        long seconds = milliseconds / 1000 % 60;
        long minutes = milliseconds / (1000 * 60) % 60;
        long hours = milliseconds / (1000 * 60 * 60);
        return String.format("%02d:%02d:%02d", hours, minutes, seconds);
    }
}






  <TextView
        android:id="@+id/timerTextView"
        android:layout_width="0dp"
        android:layout_height="0dp"
        android:visibility="gone"
        android:text="00:00:00"
        app:layout_constraintTop_toBottomOf="@id/txtProcessingStatus"
        app:layout_constraintBottom_toTopOf="@+id/fab_container"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        android:layout_marginTop="20dp"
        android:padding="16dp"/>

package com.example.qrcode;

import static android.text.format.DateUtils.formatElapsedTime;

import android.content.Context;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.ImageView;
import android.widget.TextView;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Locale;

public class DeviceProcessAdapter extends ArrayAdapter<DeviceProcess> {
    public DeviceProcessAdapter(Context context, ArrayList<DeviceProcess> deviceProcesses) {
        super(context, 0, deviceProcesses);
    }

    // Biến trạng thái
    private boolean isPlaying = false;

    @Override
    public View getView(int position, View convertView, ViewGroup parent) {
        DeviceProcess deviceProcess = getItem(position);
        if (convertView == null) {
            convertView = LayoutInflater.from(getContext()).inflate(R.layout.item_device_process, parent, false);
        }
        //TextView txtCode = convertView.findViewById(R.id.txtCode);
        TextView txtName = convertView.findViewById(R.id.txtName);
        TextView txtLine = convertView.findViewById(R.id.txtLine);
        TextView txtType = convertView.findViewById(R.id.txtType);
        TextView txtStartTime = convertView.findViewById(R.id.txtStartTime);
        TextView txtRunningTime = convertView.findViewById(R.id.txtRunningTime);
        ImageView btnToggle = convertView.findViewById(R.id.btnToggle);

// Lắng nghe sự kiện click
        btnToggle.setOnClickListener(view -> {
            if (isPlaying) {
                // Hiển thị icon "Dừng"
                btnToggle.setImageResource(R.drawable.ic_pause);
                isPlaying = false;
            } else {
                // Hiển thị icon "Tiếp tục"
                btnToggle.setImageResource(R.drawable.ic_play);
                isPlaying = true;
            }
        });


        //txtCode.setText("Code: " + deviceProcess.getCode());
        txtName.setText("Name: " + deviceProcess.getName());
        txtLine.setText("Line: " + deviceProcess.getLine());
        txtType.setText("Type: " + deviceProcess.getTypeName());
        txtStartTime.setText("Start Time: " + formatTime(deviceProcess.getStartTime()));

        // Định dạng thời gian đã trôi qua
        String formattedTime = formatElapsedTime(deviceProcess.elapsedTime);
        txtRunningTime.setText("Running Time: " + formattedTime);

        return convertView;
    }

    private String formatTime(long timeInMillis) {
        SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss", Locale.getDefault());
        Date resultDate = new Date(timeInMillis);
        return sdf.format(resultDate);
    }

    private String formatElapsedTime(long elapsedTime) {
        long seconds = (elapsedTime / 1000) % 60;
        long minutes = (elapsedTime / (1000 * 60)) % 60;
        long hours = (elapsedTime / (1000 * 60 * 60));

        if (hours > 0) {
            return String.format("%02d:%02d:%02d", hours, minutes, seconds);
        } else {
            return String.format("%02d:%02d", minutes, seconds);
        }
    }
}
package com.example.qrcode;

import android.os.Handler;

import java.util.ArrayList;

public class DeviceProcess {
    String code;
    String name;
    String stage;
    String line;
    ArrayList<String> issues;
    String typeName;
    long startTime;
    //public long elapsedTime;
    public Handler handler;
    public Runnable timerRunnable;
    public long elapsedTime;

    public DeviceProcess(String line, ArrayList<String> issues, String typeName, long startTime) {
        this.line = line;
        this.issues = issues;
        this.typeName = typeName;
        this.startTime = startTime;
    }

    public DeviceProcess(String code, String name, String stage, String line, String typeName, ArrayList<String> issues, long startTime) {
        this.code = code;
        this.name = name;
        this.stage = stage;
        this.line = line;
        this.typeName = typeName;
        this.issues = issues;
        this.startTime = startTime;
        this.elapsedTime = 0;
        this.handler = new Handler();
        this.timerRunnable = new Runnable() {
            @Override
            public void run() {
                elapsedTime = System.currentTimeMillis() - startTime;
                handler.postDelayed(this, 1000); // Run every second
            }
        };
    }

//    public DeviceProcess(String code, String name, String stage, String line, String typeName, ArrayList<String> issues, long startTime) {
//        this.code = code;
//        this.name = name;
//        this.stage = stage;
//        this.line = line;
//        this.typeName = typeName;
//        this.issues = issues;
//        this.startTime = startTime;
//        this.elapsedTime = 0;
//    }

//    public DeviceProcess(String code, String name, String stage, String line, String typeName, ArrayList<String> issues, long startTime) {
//        this.code = code;
//        this.name = name;
//        this.stage = stage;
//        this.line = line;
//        this.typeName = typeName;
//        this.issues = issues;
//        this.startTime = startTime;
//    }

    public DeviceProcess(String line, String typeName, long startTime) {
        this.line = line;
        this.typeName = typeName;
        this.startTime = startTime;
    }

    public String getCode() {
        return code;
    }

    public void setCode(String code) {
        this.code = code;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getStage() {
        return stage;
    }

    public void setStage(String stage) {
        this.stage = stage;
    }

    public String getLine() {
        return line;
    }

    public void setLine(String line) {
        this.line = line;
    }

    public ArrayList<String> getIssues() {
        return issues;
    }

    public void setIssues(ArrayList<String> issues) {
        this.issues = issues;
    }

    public long getStartTime() {
        return startTime;
    }

    public void setStartTime(long startTime) {
        this.startTime = startTime;
    }

    public String getTypeName() {
        return typeName;
    }

    public void setTypeName(String typeName) {
        this.typeName = typeName;
    }
}
